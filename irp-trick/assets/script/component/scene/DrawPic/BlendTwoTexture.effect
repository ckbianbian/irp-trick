// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {value: white}
        srcTexture: { value: white }
        dstTexture: { value: white }
        alphaThreshold: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D srcTexture;
  uniform sampler2D dstTexture;
  #endif

float customSmooth(in float x){
    float result = 0.;
    result = x*x*(3.0 - 2.0 * x);
    return result;
}

vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {
    if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(texture, v_uv0);
}

float randCustom (in float st) {
    return fract(sin(st) * 43758.5453123);
}

  void main () {
    vec2 st = v_uv0;
    vec4 color = vec4(0.);

    #if USE_TEXTURE
      // vec4 srcColor = getTextureColor(srcTexture ,v_uv0);
      vec4 srcColor = getTextureColor(texture ,v_uv0);
      vec4 dstColor = getTextureColor(dstTexture, v_uv0);
      color  = srcColor*srcColor.a+ dstColor*dstColor.a;
      // color = texture(texture, st);
    #endif

    gl_FragColor = color;
  }
}%
