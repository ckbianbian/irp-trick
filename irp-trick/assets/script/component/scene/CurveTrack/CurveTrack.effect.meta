{
  "ver": "1.0.27",
  "uuid": "77a9915b-5d4b-4dd9-aaa1-fb161c8fe746",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat calculatePosColor (in vec2 st) {\n  float upW = -0.7;\n  float bottomW = 1.;\n  float fY = fract(st.y);\n  float dist = (1. - fY) * upW + fY * bottomW;\n  return dist;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 st = v_uv0;\n  float offy = sin(st.y - cc_time.x);\n  float offt = sin(1.-cc_time.x);\n  float w = 0.2;\n  w = calculatePosColor(v_uv0);\n  float offx = 0.;\n  offx += offy;\n  offx -= offt;\n  float offs = (1. - w)/2. + offx;\n  float offe = offs + w;\n  st.x = (st.x - offs)/(offe - offs);\n  vec4 color1 = vec4(0.,1.,0.,1.);\n  vec4 color2 = vec4(0.1,0.4,0.8,1.);\n  st.y = fract(st.y - cc_time.x);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, st);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, st + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float tx = min(step(0., st.x), step(st.x, 1.));\n  float ty = step(0.55, v_uv0.y);\n  o = o * ty * tx + (1.-tx) * color1;\n  o = o * ty + (1.-ty)*color2;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat calculatePosColor (in vec2 st) {\n  float upW = -0.7;\n  float bottomW = 1.;\n  float fY = fract(st.y);\n  float dist = (1. - fY) * upW + fY * bottomW;\n  return dist;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 st = v_uv0;\n  float offy = sin(st.y - cc_time.x);\n  float offt = sin(1.-cc_time.x);\n  float w = 0.2;\n  w = calculatePosColor(v_uv0);\n  float offx = 0.;\n  offx += offy;\n  offx -= offt;\n  float offs = (1. - w)/2. + offx;\n  float offe = offs + w;\n  st.x = (st.x - offs)/(offe - offs);\n  vec4 color1 = vec4(0.,1.,0.,1.);\n  vec4 color2 = vec4(0.1,0.4,0.8,1.);\n  st.y = fract(st.y - cc_time.x);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, st);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, st + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float tx = min(step(0., st.x), step(st.x, 1.));\n  float ty = step(0.55, v_uv0.y);\n  o = o * ty * tx + (1.-tx) * color1;\n  o = o * ty + (1.-ty)*color2;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}