// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  
// 放大镜效果 将坐标点映射到对应坐标的坐标上 通过计算比例投影到对应的纹理坐标上

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        magnifierCenterPoint: {
          value: [0.2, 0.2],
          editor: {
            tooltip: "放大镜中心点坐标" 
          }
        }
        magnifierRadius: {
          value: 0.5,
          editor: {
            tooltip: "放大镜半径" 
          }
        }
        magnifierScale: {
          value: 0.6,
          editor: {
            tooltip: "放大镜倍数" 
          }
        }
        nodeTextureProportion: {
          value: 0.56,
          editor: {
            tooltip: "节点宽高比比例" 
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <cc-global>
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  uniform Magnifier {
    // 放大镜中心点坐标
    vec2 magnifierCenterPoint;
    // 放大镜半径
    float magnifierRadius;
    // 放大镜放大倍数
    float magnifierScale;
    // 节点的宽高比
    float nodeTextureProportion;
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  // 缩放中心点
  const vec2 centerPoint = vec2(0.5, 0.75);
  // 缩放比例
  const float scaleDegree = 0.6;
  // 展示缩放距离中心点的位置
  const float toCenterDis = 0.3;
  // 图片宽高比
  const float textureProportion = 0.56;

  // 获得应该渲染的纹理位置
  vec2 getTextPos(vec2 uv, vec2 center, float scale, float degree){
    vec2 tPos = uv;
    tPos.x = (uv.x - center.x) * (scale+degree*0.1) + center.x;
    tPos.y = (uv.y - center.y) * (scale+degree*0.1) + center.y;
    return tPos;
  }
  // 通过放大镜距离获得纹理
  vec2 getDisTextPos(vec2 uv, vec2 center, float scale, float radius){
    float dis = pow(abs(uv.x - center.x)*abs(uv.x - center.x) + (abs(uv.y - center.y)/nodeTextureProportion)*(abs(uv.y - center.y)/nodeTextureProportion),0.5);
    if(dis <= radius){
      float deg = smoothstep(radius - 0.03, radius, dis);
      return getTextPos(uv, center, scale, deg);
    }
    return uv;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 tempCenter = vec2(0.5,abs(sin(cc_time.x)));
    // vec2 uv = getTextPos(v_uv0, centerPoint, scaleDegree);
    // vec2 uv = getDisTextPos(v_uv0, tempCenter, scaleDegree, toCenterDis); // 这个是动态放大镜位置的一个效果
    vec2 uv = getDisTextPos(v_uv0, magnifierCenterPoint, magnifierScale, magnifierRadius); // 这个是更具传入的参数改变放大中心的方法

    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
