{
  "ver": "1.0.27",
  "uuid": "68fd8282-fc63-4009-9b2f-488ce262810f",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nuniform vec2 magnifierCenterPoint;\nuniform float magnifierRadius;\nuniform float magnifierScale;\nuniform float nodeTextureProportion;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst vec2 centerPoint = vec2(0.5, 0.75);\nconst float scaleDegree = 0.6;\nconst float toCenterDis = 0.3;\nconst float textureProportion = 0.56;\nvec2 getTextPos(vec2 uv, vec2 center, float scale, float degree){\n  vec2 tPos = uv;\n  tPos.x = (uv.x - center.x) * (scale+degree*0.1) + center.x;\n  tPos.y = (uv.y - center.y) * (scale+degree*0.1) + center.y;\n  return tPos;\n}\nvec2 getDisTextPos(vec2 uv, vec2 center, float scale, float radius){\n  float dis = pow(abs(uv.x - center.x)*abs(uv.x - center.x) + (abs(uv.y - center.y)/nodeTextureProportion)*(abs(uv.y - center.y)/nodeTextureProportion),0.5);\n  if(dis <= radius){\n    float deg = smoothstep(radius - 0.03, radius, dis);\n    return getTextPos(uv, center, scale, deg);\n  }\n  return uv;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 tempCenter = vec2(0.5,abs(sin(cc_time.x)));\n  vec2 uv = getDisTextPos(v_uv0, magnifierCenterPoint, magnifierScale, magnifierRadius);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nuniform Magnifier {\n  vec2 magnifierCenterPoint;\n  float magnifierRadius;\n  float magnifierScale;\n  float nodeTextureProportion;\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst vec2 centerPoint = vec2(0.5, 0.75);\nconst float scaleDegree = 0.6;\nconst float toCenterDis = 0.3;\nconst float textureProportion = 0.56;\nvec2 getTextPos(vec2 uv, vec2 center, float scale, float degree){\n  vec2 tPos = uv;\n  tPos.x = (uv.x - center.x) * (scale+degree*0.1) + center.x;\n  tPos.y = (uv.y - center.y) * (scale+degree*0.1) + center.y;\n  return tPos;\n}\nvec2 getDisTextPos(vec2 uv, vec2 center, float scale, float radius){\n  float dis = pow(abs(uv.x - center.x)*abs(uv.x - center.x) + (abs(uv.y - center.y)/nodeTextureProportion)*(abs(uv.y - center.y)/nodeTextureProportion),0.5);\n  if(dis <= radius){\n    float deg = smoothstep(radius - 0.03, radius, dis);\n    return getTextPos(uv, center, scale, deg);\n  }\n  return uv;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 tempCenter = vec2(0.5,abs(sin(cc_time.x)));\n  vec2 uv = getDisTextPos(v_uv0, magnifierCenterPoint, magnifierScale, magnifierRadius);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}