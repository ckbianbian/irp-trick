// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  uniform ENEGER_INFO{
    vec4 light_prop[256];
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_THUNDER
    
  #endif

float customSmooth(in float x){
    float result = 0.;
    result = x*x*(3.0 - 2.0 * x);
    return result;
}

float randCustom (in float st) {
    return fract(sin(st) * 43758.5453123);
}

float customPowerEnergy2(in vec2 enegerInfo){
    float e = 0.05 
    * (1.-enegerInfo.y)
    ;
    float result = e / enegerInfo.x;
    // result = customSmooth(result);
    return result;
}

vec2 countDisByPointAndPointArr(in vec2 st, in vec4 pointArr[256]){
    float dis = 100000.;
    float aLen = 0.;
    float tRatio = 1.;
    for(int i = 0; i < 10;i++){
        float scale = 10.;
        vec2 st2 = st * scale;
    	vec4 p1 = pointArr[i];
        vec4 p2 = pointArr[i+1];
        vec2 pointOne = vec2(p1.x, p1.y)*scale;
        vec2 pointTwo = vec2(p2.x, p2.y)*scale;
        vec2 aVec = pointTwo - pointOne;
        vec2 bVec = st2 - pointOne;
        vec2 cVec = pointOne - st2;
        
        float test = dot(bVec, aVec)/length(aVec); // a向量在b向量上的长度
    	vec3 t2 = cross(vec3(bVec, 0.), vec3(aVec, 0.));
        	 
        if(test < .0 || test > length(aVec)){
            // dis = min(dis, distance(st2, pointOne));
            float tDis = distance(st2, pointOne);
            if(dis > tDis){
                dis = tDis;
                tRatio = p1.z;
            }
            // dis = min(dis, distance(st2, pointTwo));
            tDis = distance(st2, pointTwo);
            if(dis > tDis){
                dis = tDis;
                tRatio = p2.z;
            }
        }else{
            float fre = 1.;
            vec2 tVec = cVec + normalize(aVec) * test;
            vec2 inPoint = pointOne + normalize(aVec) * test;
            float iL = floor(test);
            float fL = fract(test);
            float amplitude = 3.0;
            float h = randCustom(iL) 
            * (randCustom(floor(cc_time.x*fre+aLen)) * amplitude - amplitude / 2.)
            ;
            float h2 = randCustom(iL+1.) 
            * (randCustom(floor(cc_time.x*fre+aLen)) * amplitude - amplitude / 2.)
            ;
            float u = customSmooth(fL);
            float ratio = test/length(aVec);
            float u2 = customSmooth(ratio*ratio);
			// float h3 = mix(h, h2, u);
			float h3 = mix(h, h2, fL);
            h3 = mix(h3, 0.0, ratio);
            vec2 rVec = normalize(tVec) * h3;
            if(t2.z < .0){
                    inPoint -= rVec;
            }else{
                    inPoint += rVec;
            }
            float tDis = distance(st2, inPoint);
            // dis = min(dis, distance(st2, inPoint));
            if(dis > tDis){
                dis = tDis;
                tRatio = p1.z * (1.-ratio) + p2.z * ratio;
            }
        }
        aLen += length(aVec);
    }
    return vec2(dis, tRatio);
}

  void main () {
    vec4 pArr[256];
    pArr[0] = vec4(0.2);
    pArr[1] = vec4(0.2, 0.8, 0., 0.);
    // pArr[2] = vec4(0.8, 0.8, 0., 0.);
    pArr[2] = vec4(0.8, 0.2, 0., 0.);
    pArr[3] = vec4(0.2);
    pArr[4] = vec4(0.2);
    
    vec3 color2 = vec3(0.98, 0.98, 0.85);
    vec3 color = vec3(1.);
    vec2 st = v_uv0;
    float a2 = 0.;
    #if USE_THUNDER
        vec2 enegerInfo = countDisByPointAndPointArr(st, light_prop);
        a2 = enegerInfo.x;
        a2 = customPowerEnergy2(enegerInfo);
    #endif
    color = mix(color,color2,1.-a2);
    // color.a = a2;

    gl_FragColor = vec4(color, a2);
  }
}%
