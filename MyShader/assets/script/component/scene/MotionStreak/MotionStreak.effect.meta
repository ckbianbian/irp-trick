{
  "ver": "1.0.27",
  "uuid": "fe6a5847-52ab-418a-9ed8-64fc14af8ced",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\n  varying vec4 v_color;\n  uniform vec4 light_prop[256];\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  #if USE_THUNDER\n  #endif\nfloat customSmooth(in float x){\n    float result = 0.;\n    result = x*x*(3.0 - 2.0 * x);\n    return result;\n}\nfloat randCustom (in float st) {\n    return fract(sin(st) * 43758.5453123);\n}\nfloat customPowerEnergy2(in vec2 enegerInfo){\n    float e = 0.05\n    * (1.-enegerInfo.y)\n    ;\n    float result = e / enegerInfo.x;\n    return result;\n}\nvec2 countDisByPointAndPointArr(in vec2 st, in vec4 pointArr[256]){\n    float dis = 100000.;\n    float aLen = 0.;\n    float tRatio = 1.;\n    for(int i = 0; i < 10;i++){\n        float scale = 10.;\n        vec2 st2 = st * scale;\n      vec4 p1 = pointArr[i];\n        vec4 p2 = pointArr[i+1];\n        vec2 pointOne = vec2(p1.x, p1.y)*scale;\n        vec2 pointTwo = vec2(p2.x, p2.y)*scale;\n        vec2 aVec = pointTwo - pointOne;\n        vec2 bVec = st2 - pointOne;\n        vec2 cVec = pointOne - st2;\n        float test = dot(bVec, aVec)/length(aVec);\n      vec3 t2 = cross(vec3(bVec, 0.), vec3(aVec, 0.));\n        if(test < .0 || test > length(aVec)){\n            float tDis = distance(st2, pointOne);\n            if(dis > tDis){\n                dis = tDis;\n                tRatio = p1.z;\n            }\n            tDis = distance(st2, pointTwo);\n            if(dis > tDis){\n                dis = tDis;\n                tRatio = p2.z;\n            }\n        }else{\n            float fre = 1.;\n            vec2 tVec = cVec + normalize(aVec) * test;\n            vec2 inPoint = pointOne + normalize(aVec) * test;\n            float iL = floor(test);\n            float fL = fract(test);\n            float amplitude = 3.0;\n            float h = randCustom(iL)\n            * (randCustom(floor(cc_time.x*fre+aLen)) * amplitude - amplitude / 2.)\n            ;\n            float h2 = randCustom(iL+1.)\n            * (randCustom(floor(cc_time.x*fre+aLen)) * amplitude - amplitude / 2.)\n            ;\n            float u = customSmooth(fL);\n            float ratio = test/length(aVec);\n            float u2 = customSmooth(ratio*ratio);\n      float h3 = mix(h, h2, fL);\n            h3 = mix(h3, 0.0, ratio);\n            vec2 rVec = normalize(tVec) * h3;\n            if(t2.z < .0){\n                    inPoint -= rVec;\n            }else{\n                    inPoint += rVec;\n            }\n            float tDis = distance(st2, inPoint);\n            if(dis > tDis){\n                dis = tDis;\n                tRatio = p1.z * (1.-ratio) + p2.z * ratio;\n            }\n        }\n        aLen += length(aVec);\n    }\n    return vec2(dis, tRatio);\n}\n  void main () {\n    vec4 pArr[256];\n    pArr[0] = vec4(0.2);\n    pArr[1] = vec4(0.2, 0.8, 0., 0.);\n    pArr[2] = vec4(0.8, 0.2, 0., 0.);\n    pArr[3] = vec4(0.2);\n    pArr[4] = vec4(0.2);\n    vec3 color2 = vec3(0.98, 0.98, 0.85);\n    vec3 color = vec3(1.);\n    vec2 st = v_uv0;\n    float a2 = 0.;\n    #if USE_THUNDER\n        vec2 enegerInfo = countDisByPointAndPointArr(st, light_prop);\n        a2 = enegerInfo.x;\n        a2 = customPowerEnergy2(enegerInfo);\n    #endif\n    color = mix(color,color2,1.-a2);\n    gl_FragColor = vec4(color, a2);\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in vec4 v_color;\n  uniform ENEGER_INFO{\n    vec4 light_prop[256];\n  };\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  #if USE_THUNDER\n  #endif\nfloat customSmooth(in float x){\n    float result = 0.;\n    result = x*x*(3.0 - 2.0 * x);\n    return result;\n}\nfloat randCustom (in float st) {\n    return fract(sin(st) * 43758.5453123);\n}\nfloat customPowerEnergy2(in vec2 enegerInfo){\n    float e = 0.05\n    * (1.-enegerInfo.y)\n    ;\n    float result = e / enegerInfo.x;\n    return result;\n}\nvec2 countDisByPointAndPointArr(in vec2 st, in vec4 pointArr[256]){\n    float dis = 100000.;\n    float aLen = 0.;\n    float tRatio = 1.;\n    for(int i = 0; i < 10;i++){\n        float scale = 10.;\n        vec2 st2 = st * scale;\n      vec4 p1 = pointArr[i];\n        vec4 p2 = pointArr[i+1];\n        vec2 pointOne = vec2(p1.x, p1.y)*scale;\n        vec2 pointTwo = vec2(p2.x, p2.y)*scale;\n        vec2 aVec = pointTwo - pointOne;\n        vec2 bVec = st2 - pointOne;\n        vec2 cVec = pointOne - st2;\n        float test = dot(bVec, aVec)/length(aVec);\n      vec3 t2 = cross(vec3(bVec, 0.), vec3(aVec, 0.));\n        if(test < .0 || test > length(aVec)){\n            float tDis = distance(st2, pointOne);\n            if(dis > tDis){\n                dis = tDis;\n                tRatio = p1.z;\n            }\n            tDis = distance(st2, pointTwo);\n            if(dis > tDis){\n                dis = tDis;\n                tRatio = p2.z;\n            }\n        }else{\n            float fre = 1.;\n            vec2 tVec = cVec + normalize(aVec) * test;\n            vec2 inPoint = pointOne + normalize(aVec) * test;\n            float iL = floor(test);\n            float fL = fract(test);\n            float amplitude = 3.0;\n            float h = randCustom(iL)\n            * (randCustom(floor(cc_time.x*fre+aLen)) * amplitude - amplitude / 2.)\n            ;\n            float h2 = randCustom(iL+1.)\n            * (randCustom(floor(cc_time.x*fre+aLen)) * amplitude - amplitude / 2.)\n            ;\n            float u = customSmooth(fL);\n            float ratio = test/length(aVec);\n            float u2 = customSmooth(ratio*ratio);\n      float h3 = mix(h, h2, fL);\n            h3 = mix(h3, 0.0, ratio);\n            vec2 rVec = normalize(tVec) * h3;\n            if(t2.z < .0){\n                    inPoint -= rVec;\n            }else{\n                    inPoint += rVec;\n            }\n            float tDis = distance(st2, inPoint);\n            if(dis > tDis){\n                dis = tDis;\n                tRatio = p1.z * (1.-ratio) + p2.z * ratio;\n            }\n        }\n        aLen += length(aVec);\n    }\n    return vec2(dis, tRatio);\n}\n  void main () {\n    vec4 pArr[256];\n    pArr[0] = vec4(0.2);\n    pArr[1] = vec4(0.2, 0.8, 0., 0.);\n    pArr[2] = vec4(0.8, 0.2, 0., 0.);\n    pArr[3] = vec4(0.2);\n    pArr[4] = vec4(0.2);\n    vec3 color2 = vec3(0.98, 0.98, 0.85);\n    vec3 color = vec3(1.);\n    vec2 st = v_uv0;\n    float a2 = 0.;\n    #if USE_THUNDER\n        vec2 enegerInfo = countDisByPointAndPointArr(st, light_prop);\n        a2 = enegerInfo.x;\n        a2 = customPowerEnergy2(enegerInfo);\n    #endif\n    color = mix(color,color2,1.-a2);\n    gl_FragColor = vec4(color, a2);\n  }"
      }
    }
  ],
  "subMetas": {}
}