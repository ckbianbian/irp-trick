{
  "ver": "1.0.27",
  "uuid": "356a47f9-198e-4e3a-bf66-e827e20ef8e6",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nuniform vec4 light_prop[256];\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat countPotentialEnergy(vec2 point, vec4 pointArr[256], float energy){\n  float e = 0.0;\n  for(int i = 0; i<25;i++){\n      float temp = energy*energy/((point.x - pointArr[i].x)*(point.x - pointArr[i].x)+(point.y - pointArr[i].y)*4.0*(point.y - pointArr[i].y));\n      e+=temp;\n  }\n  return e;\n}\nfloat energy(float r, vec2 point1, vec2 point2) {\n  return (r * r) / ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));\n}\nvoid main () {\n  vec4 color = vec4(0,1,1,1);\n  float energy = countPotentialEnergy(v_uv0, light_prop,0.01);\n  float o4 = step(.1, energy);\n  color.a = o4;\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nuniform ENEGER_INFO{\n  vec4 light_prop[256];\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat countPotentialEnergy(vec2 point, vec4 pointArr[256], float energy){\n  float e = 0.0;\n  for(int i = 0; i<25;i++){\n      float temp = energy*energy/((point.x - pointArr[i].x)*(point.x - pointArr[i].x)+(point.y - pointArr[i].y)*4.0*(point.y - pointArr[i].y));\n      e+=temp;\n  }\n  return e;\n}\nfloat energy(float r, vec2 point1, vec2 point2) {\n  return (r * r) / ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));\n}\nvoid main () {\n  vec4 color = vec4(0,1,1,1);\n  float energy = countPotentialEnergy(v_uv0, light_prop,0.01);\n  float o4 = step(.1, energy);\n  color.a = o4;\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}