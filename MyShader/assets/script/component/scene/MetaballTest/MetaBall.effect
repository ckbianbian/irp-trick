// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  uniform ENEGER_INFO{
    vec4 light_prop[256];
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  float countPotentialEnergy(vec2 point, vec4 pointArr[256], float energy){
    
    float e = 0.0;
    
    for(int i = 0; i<25;i++){
        float temp = energy*energy/((point.x - pointArr[i].x)*(point.x - pointArr[i].x)+(point.y - pointArr[i].y)*4.0*(point.y - pointArr[i].y));
        e+=temp;
    }
    
    return e;
  }

  float countPotentialEnergyBk(vec2 point, vec2 pointArr[3], float energy){
    
    float e = 0.0;    
    for(int i = 0; i<3;i++){
        float temp = energy*energy/((point.x - pointArr[i].x) * (point.x - pointArr[i].x) + (point.y - pointArr[i].y) *4.0* (point.y - pointArr[i].y));
        e+=temp;
    }
    
    return e;
  }

  float energy(float r, vec2 point1, vec2 point2) {
    return (r * r) / ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));
  }

  void main () {
    vec4 color = vec4(0,1,1,1);

    // vec2 arr[3];
    // arr[0] = vec2(0.3,0.5);
    // arr[1] = vec2(0.5,0.5);
    // arr[2] = vec2(0.55,0.5);
    // float o3 = countPotentialEnergyBk(v_uv0, arr,0.01);
    float energy = countPotentialEnergy(v_uv0, light_prop,0.01);
    float o4 = step(.1, energy);
    // // float o5 = step(.0027165, o3);
    // float o5 = step(.002, o3);

    color.a = o4;

    gl_FragColor = color;
  }
}%
