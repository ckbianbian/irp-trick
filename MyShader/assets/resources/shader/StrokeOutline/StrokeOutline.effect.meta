{
  "ver": "1.0.27",
  "uuid": "fed5b1b7-0c76-4541-8a51-43d4ccef1b4f",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 textureSize;\nfloat getWeight(float x, float y) {\n  return (1.0 / (2.0 * 3.141592653589793 * pow(0.84089642, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(0.84089642, 2.0)));\n}\nfloat sobel(vec2 uv, sampler2D texture){\n  float sobelX = 0.;\n  float sobelY = 0.;\n  for(float i = -1.0; i <= 1.0; i += 2.0){\n    float perXi = i / textureSize.x;\n    float perYi = i / textureSize.y;\n    for(float j = -1.0; j <= 1.0; j ++){\n      float perXj = j*0.001 / textureSize.x;\n      float perYj = j*0.001 / textureSize.y;\n      vec4 xColor = texture2D(texture,uv + vec2(perXi, perYj));\n      vec4 yColor = texture2D(texture,uv + vec2(perXj, perYi));\n      float sobelXA = 0.;\n      float sobelYA = 0.;\n      sobelXA = i *3.* xColor.a;\n      sobelYA = i *3.* yColor.a;\n      if(j == 0.0){\n        sobelXA = i * 10.0 * xColor.a;\n        sobelYA = i * 10.0 * yColor.a;\n      }\n      sobelX += sobelXA;\n      sobelY += sobelYA;\n    }\n  }\n  return pow(sobelX*sobelX + sobelY*sobelY,0.5);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  vec2 temp_uv = v_uv0;\n  if(o.a <= 0.9){\n    const float size = floor(0.84089642 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n      totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n      totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    float oA =0.0;\n    float onePxWidth = 1.0 / textureSize.x;\n    float onePxHeight = 1.0 / textureSize.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        oA += sobel(temp_uv + vec2(onePxWidth  * x, onePxHeight  * y), texture) * weight;\n      }\n    }\n      vec4 outlineColor = vec4(1.,1.,0.,oA);\n      vec4 finalColor = mix(o, outlineColor, oA);\n      o = finalColor;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform GaussianBlur {\n  vec2 textureSize;\n};\nfloat getWeight(float x, float y) {\n  return (1.0 / (2.0 * 3.141592653589793 * pow(0.84089642, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(0.84089642, 2.0)));\n}\nfloat sobel(vec2 uv, sampler2D texture){\n  float sobelX = 0.;\n  float sobelY = 0.;\n  for(float i = -1.0; i <= 1.0; i += 2.0){\n    float perXi = i / textureSize.x;\n    float perYi = i / textureSize.y;\n    for(float j = -1.0; j <= 1.0; j ++){\n      float perXj = j*0.001 / textureSize.x;\n      float perYj = j*0.001 / textureSize.y;\n      vec4 xColor = texture(texture,uv + vec2(perXi, perYj));\n      vec4 yColor = texture(texture,uv + vec2(perXj, perYi));\n      float sobelXA = 0.;\n      float sobelYA = 0.;\n      sobelXA = i *3.* xColor.a;\n      sobelYA = i *3.* yColor.a;\n      if(j == 0.0){\n        sobelXA = i * 10.0 * xColor.a;\n        sobelYA = i * 10.0 * yColor.a;\n      }\n      sobelX += sobelXA;\n      sobelY += sobelYA;\n    }\n  }\n  return pow(sobelX*sobelX + sobelY*sobelY,0.5);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  vec2 temp_uv = v_uv0;\n  if(o.a <= 0.9){\n    const float size = floor(0.84089642 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n      totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n      totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    float oA =0.0;\n    float onePxWidth = 1.0 / textureSize.x;\n    float onePxHeight = 1.0 / textureSize.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        oA += sobel(temp_uv + vec2(onePxWidth  * x, onePxHeight  * y), texture) * weight;\n      }\n    }\n      vec4 outlineColor = vec4(1.,1.,0.,oA);\n      vec4 finalColor = mix(o, outlineColor, oA);\n      o = finalColor;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}