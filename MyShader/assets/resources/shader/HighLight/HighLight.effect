// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  vec2 rotatePoint(vec2 point, float angle, vec2 center){
    float x = center.x + cos(angle) * point.x - sin(angle) * point.y;
    float y = center.y + sin(angle) * point.x + cos(angle) * point.y;
    return vec2(x, y);
  }

  vec2 getPointByRdAndRadio(vec2 point, float angle, float radio){
    float x = point.x + radio * cos(angle);
    float y = point.y + radio * sin(angle);
    return vec2(x, y);
  }

  float getOpacityByCheckAround(vec2 point, sampler2D texture, float dis){
    float aA = 0.;
    float num = 36.;
    float per = 360. / num;
    float circleNum = 5.;
    float avergeA = 0.;
    float perRd = dis/circleNum;
    for(float j = 1.; j <= 5.; j++){
      float circleAvgA = 0.;
      float perDis = j * perRd;
      for(float i = 0.0; i < 36.; i ++){
        circleAvgA += texture(texture, getPointByRdAndRadio(point, per * i, perDis)).a;
      }
      avergeA += circleAvgA / num;
    }
    aA = avergeA / circleNum;
    return aA;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif
    vec2 t_uv = vec2(v_uv0.x ,v_uv0.y);
    vec4 otColor = texture(texture, t_uv);
    float param = abs(sin(cc_time.x  * 3.)) * 0.05;
    o *= v_color;

    if(o.a<0.5){
      float test = getOpacityByCheckAround(t_uv, texture, param);
      // if(test>0.){
      //   // float oA = smoothstep(0.45,0.5, abs(distance(v_uv0, vec2(0.5, 0.5))));
      // }
      float alpha = -1.0 * (test - 1.0) * (test - 1.0) * (test - 1.0) * (test - 1.0) + 1.0; // 曲线函数影响色值
      o = vec4(0.,0.,0., alpha);
    }

    // o.a = 1.-smoothstep(0.3, 0.5, abs(distance(v_uv0, vec2(0.5,0.5))));

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
