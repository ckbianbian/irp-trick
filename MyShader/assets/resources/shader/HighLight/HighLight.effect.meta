{
  "ver": "1.0.25",
  "uuid": "16afb33d-0ae6-4712-9bdf-97298f5a033b",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec2 getPointByRdAndRadio(vec2 point, float angle, float radio){\n  float x = point.x + radio * cos(angle);\n  float y = point.y + radio * sin(angle);\n  return vec2(x, y);\n}\nfloat getOpacityByCheckAround(vec2 point, sampler2D texture, float dis){\n  float aA = 0.;\n  float num = 36.;\n  float per = 360. / num;\n  float circleNum = 5.;\n  float avergeA = 0.;\n  float perRd = dis/circleNum;\n  for(float j = 1.; j <= 5.; j++){\n    float circleAvgA = 0.;\n    float perDis = j * perRd;\n    for(float i = 0.0; i < 36.; i ++){\n      circleAvgA += texture2D(texture, getPointByRdAndRadio(point, per * i, perDis)).a;\n    }\n    avergeA += circleAvgA / num;\n  }\n  aA = avergeA / circleNum;\n  return aA;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 t_uv = vec2(v_uv0.x ,v_uv0.y);\n  vec4 otColor = texture2D(texture, t_uv);\n  float param = abs(sin(cc_time.x  * 3.)) * 0.05;\n  o *= v_color;\n  if(o.a<0.5){\n    float test = getOpacityByCheckAround(t_uv, texture, param);\n    float alpha = -1.0 * (test - 1.0) * (test - 1.0) * (test - 1.0) * (test - 1.0) + 1.0;\n    o = vec4(0.,0.,0., alpha);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec2 getPointByRdAndRadio(vec2 point, float angle, float radio){\n  float x = point.x + radio * cos(angle);\n  float y = point.y + radio * sin(angle);\n  return vec2(x, y);\n}\nfloat getOpacityByCheckAround(vec2 point, sampler2D texture, float dis){\n  float aA = 0.;\n  float num = 36.;\n  float per = 360. / num;\n  float circleNum = 5.;\n  float avergeA = 0.;\n  float perRd = dis/circleNum;\n  for(float j = 1.; j <= 5.; j++){\n    float circleAvgA = 0.;\n    float perDis = j * perRd;\n    for(float i = 0.0; i < 36.; i ++){\n      circleAvgA += texture(texture, getPointByRdAndRadio(point, per * i, perDis)).a;\n    }\n    avergeA += circleAvgA / num;\n  }\n  aA = avergeA / circleNum;\n  return aA;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 t_uv = vec2(v_uv0.x ,v_uv0.y);\n  vec4 otColor = texture(texture, t_uv);\n  float param = abs(sin(cc_time.x  * 3.)) * 0.05;\n  o *= v_color;\n  if(o.a<0.5){\n    float test = getOpacityByCheckAround(t_uv, texture, param);\n    float alpha = -1.0 * (test - 1.0) * (test - 1.0) * (test - 1.0) * (test - 1.0) + 1.0;\n    o = vec4(0.,0.,0., alpha);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}